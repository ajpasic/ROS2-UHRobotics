Agenda items
1. Figure out who everyone is and what their backgrounds are
2. Introduce ROS a little bit
3. Go over the installation process
4. Introduce ROS a little bit more
5. Check to see if everyone is doing ok with installation
6. Introduce the rest of ROS

Introducing ROS (1)
	ROS stands for Robot Operating System, and it gets its name from the fact that its design makes it a meta-OS, which just means that it functions in a similar way to an OS. Please note that this workshop is not about operating systems, and you are under no obligation to understand them, although you may learn more than you bargained for if you decide to put Linux on your machine.
	ROS is described as a framework for integrating robot systems. Let's go over what a framework is. From Wikipedia: "A software framework is an abstraction in which software providing generic functionality can be selectively changed by additional user-written code". In this workshop, you are not writing ROS code. ROS code has already been written. You are using the framework that ROS provides to write your own (mostly) self-contained programs. These programs utilize the functionality of ROS to make a robot do stuff, like walking around without bumping into things.

Introducing ROS (2)
	There are a couple things that set ROS apart from other frameworks. I've already mentioned a big one: self-contained programs. These programs are known as packages, and they can be connected with each other to do things that they cannot do on their own. This system of compartmentalizing functionality plays a big role in making ROS universal across robot systems.
	Another commendable feature of ROS is that it's open-source. For you, that means it's freely distributed and easy to get, but for developers it means it's freely modifiable and easy to distribute.
	ROS provides a communications layer above the host OS, and it does it by modeling robot systems as graphs. A graph is composed of nodes (dots) and edges (lines) connecting them. In ROS, a node is a computational building block that is responsible for some aspect of the program. Nodes interact with each other through topics and services, which provide asynchronous and synchronous communication. 
	Lastly, ROS is multi-lingual in the sense that it has support for multiple languages. Most people know either C++ or Python, and ROS has support for both.

Introducing ROS (3)
	You may be noticing that ROS is pretty abstract, and that's pretty standard for frameworks. A good framework generalizes processes, which allows you to build up complex systems from basic building blocks. The rest of this explanation will be an improvised review of both the ROS journal paper and AGITR.

